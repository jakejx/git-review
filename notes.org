* Architecture

** Variables

Public variables.

#+begin_src elisp
  (defvar git-review-change-id nil "The unique id of a change.")
  (defvar git-review-patchset nil "The patchset of the current change.")
  (defvar git-review-project nil "The name of the current project.")
  (defvar git-review-add-remote-conversations nil "Function that returns remote conversations.")
#+end_src

Private variables.

#+begin_src elisp
  (defvar git-review--changes nil "All changes.")
  (defvar git-review--change nil "The current change.")
  (defvar git-review--patchset nil "The current patchset.")
  (defvar git-review--rebased-files nil "List of files that are rebased.")
  (defvar git-review--unchanged-files nil "List of files that are unchanged.")
  (defvar git-review--conversations nil "List of conversations.")
#+end_src

** Data structures

*** Reviews

Reviews is an alist of changes.

#+begin_src elisp
  '(("change-id1" . change1)
    ("change-id2" . change2))
#+end_src

*** Change

A change is an alist.

#+begin_src elisp
  '((change-id . "change-id")
    (project . "project-name")
    (conversations . [conversation])
    (current-patchset . 2) ; This is the currently reviewed patchset
    (patchsets . [patchset]))
#+end_src

*** Patchset

A patchset is an alist.

#+begin_src elisp
  '((current-file . "file1.cpp")
    (previous-file . "file2.cpp")
    (base-patchset . 1) ; Optional
    (files . '(("foo.cpp" . file-info)
               ("bar.cpp" . file-info)))
    (commit-id . "sha1"))
#+end_src

*** Conversations

A conversation is an alist.

#+begin_src elisp
  '((id . "a unique identifier")
    (comments . [comment])
    (resolved . t) ; Optional
    (location . '((start-line . 5)
                  (end-line . 6)
                  (start-column . 10)
                  (end-column . 20)))
    (commentable . t)) ; Optional
#+end_src

*** Comments

A comment is an alist.

#+begin_src elisp
  '((id . "a unique identifier")
    (user . "John Doe")
    (message . "Hello")
    (remote . t) ; Optional
    (side . a)
    (published . t)) ; Optional
#+end_src

*** File-info

A file-info is an alist.

#+begin_src elisp
  '((metadata . '((autogenerated . t))) ; Optional
    (filename . "foo.cpp")
    (original-filename . "bar.cpp") ; Optional
    (type . "MODIFIED")
    (reviewed . t))
#+end_src

** Workflows

- Opening patchset3 of a change. The review should contain remote comments if there are any. The user should be able to switch the base patchset which by default is nil and replace it with patchset2. This should alter which files are being list. It should also update the progress given that the number of interesting files could have changed. If the current file is still of interest it should be kept as the currently viewed file, otherwise it should switch to commit message. When the base change it will alter which comments that gets displayed. It will also alter the files that are being tagged as unchanged or rebased.

